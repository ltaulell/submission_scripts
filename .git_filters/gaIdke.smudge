#!/usr/bin/perl -p
########################################################################
#
# $Id: gaIdke.smudge 1.19 $
# $IdBlockFurtherExpansion$
#
#  Copyright Â© 2016 John E Wulff <immediatec@gmail.com>
#  SPDX-License-Identifier: MIT
#
# Filters and hooks to implement 'Automatic GIT $Id: Keyword Expansion'
#
# smudge <p1>
#         <p1> path of the file to be smudged relative to GIT base.
#
#         Insert git SHA-1 hash, iso commit date and author name before the
#         final $ of a clean $Id string, which is '$Id: <filename> <> $'.
#         <filename> and <> can be any non white-space characters except
#         <filename> and <> may not start with a $ to prevent a Heisenbug.
#
#         Only 'clean' $Id strings are smudged. This makes sure that any
#         $Id strings imported from legacy repositories are not modified.
#
#         'smudge' is called by 'git merge', 'git checkout' and indirectly
#         by 'git pull', git clone' and 'post-commit'.
#
#         To find the right commit for this file and version in case this
#         script is called for a non HEAD commit, the whole log has to be
#         scanned for 'Id: file ' inserted by gaIdke-prepare-commit-message.
#         This search may fail in which case it is corrected in 'post-checkout'.
#
# Environment:
#         export GAIDKE=verbose # output extra debug messages.
#         export GAIDKE=Verbose # output even more debug messages.
#         export GAIDKE=        # no debug output.
#
# NOTE:   gaIdke.smudge itself is not smudged on checkout because gaIdke.smudge
#         is temporarily removed during gaIdke-post-commit before git checkout.
#
# modified extensively from code by Kimmo R. M. Hovi, Fair Warning, Inc.
#
########################################################################

BEGIN {
    ########################################################################
    #    Determine filename from input parameter path
    ########################################################################
    $path = shift;
    if ($path =~ m/.*\/(.*)/) {
	$filename = $1;
    } else {
	$filename = $path;
    }
    $ga = $ENV{GAIDKE};				# environment variable GAIDKE can be set to
    print STDERR "smudge	$path\n" if $ga =~ m/\bV/;				# V[erbose]
    $allowIdExpansion = 1;			# allow $Id expansion initially
    $log = "no Id";
}

if ($allowIdExpansion and m/\$Id/) {		# speed up scan by pre-selecting $Id lines
    if (m/\$IdBlockFurtherExpansion\$/) {
	$allowIdExpansion = 0;			# block $Id expansion for texts describing this feature
    } elsif (m/\$Id:\s+([^\$\s]\S*)\s+([^\$\s]\S*)\s+\$/ and $filename eq $1) {
	$ver = $2;
	open(LOG, "git log -- $path |") or die "can't fork: $!";
	$commit = $log = '';			# look for right $commit in the whole log for this file
	while (defined($l = <LOG>)) {
	    if ($l =~ m/^commit ([\da-f]+)$/) {
		$commit = $1;
		print STDERR " commit	$commit\n" if $ga =~ m/\bV/;			# V[erbose]
	    } elsif ($l =~ m/Id: $path $ver/) {
		$log = qx(git log $commit -1 --pretty=format:"%h %ai %an" -- $path);
		print STDERR "	\$Id: $filename $ver $log \$\n" if $ga =~ m/\bv/i;	# v[erbose]
		s/\$Id:\s+[^\$\s]\S*\s+[^\$\s]\S*\s+\$/\$Id: $filename $ver $log \$/;
		last;	# found 'Id: file ver' in commit message written by gaIdke-prepare-commit-message
	    }
	}
	close LOG;
    }
}

END {
    unless ($log or $ENV{GAIDKE_P_C}) {		# block if called via 'post-checkout'
	open SMUDGE, ">> .gitSmudgeFailed" or die "Cannot create '.gitSmudgeFailed': $!";
	print SMUDGE "$path $ver\n";		# append if $Id but no corresponding log
	close SMUDGE;
    }
}
